using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace RaviwithCsharp.Day-7
{
    public class 12_Overriding Methods of System.Object
    {
        
    }
}
-------------------------------------------------
Overriding Methods of System.Object in C# ðŸ”¥
ðŸ“Œ System.Object Methods Ko Override Karna Kyun Zaroori Hai?
C# me har ek class System.Object se inherit hoti hai aur uske 4 important methods ko override karna best practice hoti hai jab:
âœ… Custom String Representation chahiye (ToString())
âœ… Objects ki value-based comparison chahiye (Equals())
âœ… Hash tables ya collections me object ka unique identity chahiye (GetHashCode())



ðŸ“Œ 2. Overriding ToString() - Custom String Representation
ðŸ”¹ By Default: ToString() class ka naam return karta hai.
ðŸ”¹ Override karne se meaningful output milega.

âœ… Example: Custom ToString()
using System;

class Person
{
    public string Name { get; set; }
    public int Age { get; set; }

    public override string ToString()
    {
        return $"Person [Name: {Name}, Age: {Age}]";
    }
}

class Program
{
    static void Main()
    {
        Person p1 = new Person { Name = "Ali", Age = 25 };
        Console.WriteLine(p1.ToString()); // Person [Name: Ali, Age: 25]
    }
}
âœ” Now instead of Person, hume ek readable output mil raha hai.
----------------------------------------------------------------------
ðŸ“Œ 3. Overriding Equals(object obj) - Value-Based Comparison
ðŸ”¹ Default Behavior: Equals() reference ko compare karta hai.
ðŸ”¹ Agar objects ka data compare karna ho toh isko override karna zaroori hai.

âœ… Example: Value-Based Comparison
using System;

class Person
{
    public string Name { get; set; }
    public int Age { get; set; }

    public override bool Equals(object obj)
    {
        if (obj is Person p)
            return this.Name == p.Name && this.Age == p.Age;

        return false;
    }
}

class Program
{
    static void Main()
    {
        Person p1 = new Person { Name = "Ali", Age = 25 };
        Person p2 = new Person { Name = "Ali", Age = 25 };

        Console.WriteLine(p1.Equals(p2)); // âœ… True (Value-based comparison)
    }
}
âœ” Ab yeh object ki values compare karega, na ke memory references.
----------------------------------------------------------
ðŸ“Œ 4. Overriding GetHashCode() - Unique Hash for Collections
ðŸ”¹ Default Behavior: Har object ka random integer hash generate hota hai.
ðŸ”¹ Agar Equals() override karein toh GetHashCode() bhi override karna best practice hai.

âœ… Example: Hash Code Based on Name
using System;

class Person
{
    public string Name { get; set; }
    public int Age { get; set; }

    public override int GetHashCode()
    {
        return Name.GetHashCode() ^ Age.GetHashCode(); // XOR operation
    }
}

class Program
{
    static void Main()
    {
        Person p1 = new Person { Name = "Ali", Age = 25 };
        Console.WriteLine(p1.GetHashCode()); // Unique hash based on Name and Age
    }
}
âœ” Ab Dictionary ya HashSet me Person ka hash predictable hoga.
---------------------------------------------------
ðŸ“Œ 5. Overriding Finalize() - Destructor for Cleanup
ðŸ”¹ Finalize method C# me Destructor ka alternative hai jo memory cleanup karta hai.
ðŸ”¹ Yeh method tabhi chalta hai jab Garbage Collector (GC) object destroy karta hai.
ðŸ”¹ Recommended: Agar manual cleanup karna hai toh IDisposable use karein instead of Finalize().

âœ… Example: Cleaning Up Resources
using System;

class Resource
{
    public Resource()
    {
        Console.WriteLine("Resource Created");
    }

    ~Resource()
    {
        Console.WriteLine("Resource Destroyed");
    }
}

class Program
{
    static void Main()
    {
        Resource r = new Resource();
    } // Jab GC run karega, destructor chalega
}
âœ” Yeh destructor automatic memory cleanup karta hai jab object destroy hota hai.
âœ” But Dispose() method recommended hai manual cleanup ke liye.
----------------------------------------------------------------------------
ðŸ“Œ 6. Practical Example: Overriding Multiple Methods
âœ… Scenario: Comparing Products in an E-Commerce App
âœ” Each product ka unique ID, Name aur Price hota hai.
âœ” Comparison Equals() override karke value-based banayenge.
âœ” Hash table ke liye GetHashCode() customize karenge.
âœ” Meaningful string representation ke liye ToString() override karenge.

using System;

class Product
{
    public int ProductID { get; set; }
    public string Name { get; set; }
    public double Price { get; set; }

    public override string ToString()
    {
        return $"Product: {Name}, Price: {Price:C}";
    }

    public override bool Equals(object obj)
    {
        if (obj is Product p)
            return this.ProductID == p.ProductID;

        return false;
    }

    public override int GetHashCode()
    {
        return ProductID.GetHashCode();
    }
}

class Program
{
    static void Main()
    {
        Product p1 = new Product { ProductID = 101, Name = "Laptop", Price = 50000 };
        Product p2 = new Product { ProductID = 101, Name = "Laptop", Price = 50000 };

        Console.WriteLine(p1.ToString());  // Product: Laptop, Price: â‚¹50,000.00
        Console.WriteLine(p1.Equals(p2));  // âœ… True (ID-based comparison)
        Console.WriteLine(p1.GetHashCode());  // Unique Hash Code
    }
}
âœ” Ab Equals() sirf ProductID ko compare karega, na ki references.
âœ” GetHashCode() predictably same hash return karega for same IDs.

-------------------------------------------------
ðŸ”¥ Final Thoughts
âœ” Agar aap custom objects use kar rahe hain (Products, Employees, Orders, etc.), toh Equals(), ToString(), aur GetHashCode() override karna zaroori hai.
âœ” Override ToString() for better readability.
âœ” Override Equals() for meaningful object comparison.
âœ” Override GetHashCode() for efficient dictionary/hashset usage.
âœ” Use Finalize() only if absolutely necessary; prefer Dispose() instead.