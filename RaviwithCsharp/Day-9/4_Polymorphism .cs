using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace RaviwithCsharp.Day-9
{
    public class 4_Polymorphism 
    {
        
    }
}
---------------------------------------------------------------

Polymorphism kya hota hai?
Polymorphism ka matlab hota hai:

"Ek kaam ko alag-alag tareekon se karna" ya "ek cheez ka multiple forms lena".

Simple bhaasha mein:

Ek hi function/method alag-alag behaviour dikhaata hai depending on situation ya object.

Code flexible aur powerful ban jaata hai.

üí¨ Aur simple bolun toh:
Ek naam, lekin kaam alag-alag situation mein thoda alag hota hai.

Same action, different behaviour.
----------------------------------------------------------

üéØ Real-world Example:
TV Remote ko socho:

Remote mein ek Power Button hota hai.

Tum TV ke remote se TV on/off karte ho.

Tum AC ke remote se AC on/off karte ho.

Tum Set-Top Box ke remote se Set-Top Box on/off karte ho.

Button wahi ek hai (Power Button)
Kaam har device ka alag hai.

‚û°Ô∏è Yeh hai Polymorphism. ‚úÖ
--------------------------------------------------------------

üë®‚Äçüíª Programming mein do tareeke hote hain Polymorphism ke:

Type	Meaning
1Ô∏è‚É£ Compile-time Polymorphism (Static)	Jab program ke compile hone ke waqt decide ho jaaye kaunsa function chalega (Method Overloading)
2Ô∏è‚É£ Runtime Polymorphism (Dynamic)	Jab program chalne ke dauraan decide hota hai kaunsa function chalega (Method Overriding)
1Ô∏è‚É£ Compile-time Polymorphism (Method Overloading)
Ek hi naam ke methods, par arguments alag.

Example:
public class Calculator
{
    public int Add(int a, int b)
    {
        return a + b;
    }

    public double Add(double a, double b)
    {
        return a + b;
    }

    public int Add(int a, int b, int c)
    {
        return a + b + c;
    }
}
‚û°Ô∏è Yahan Add() method teen baar likha hai, but alag-alag arguments ke saath.

‚û°Ô∏è Jab tum Add(2,3) bulaoge to 2-argument waala chalega.

‚û°Ô∏è Jab Add(2.5, 3.7) bulaoge to double waala chalega.

2Ô∏è‚É£ Runtime Polymorphism (Method Overriding)
Parent class ka method child class apne tareeke se likh leti hai.

Example:

public class Animal
{
    public virtual void Sound()
    {
        Console.WriteLine("Animal makes a sound");
    }
}

public class Dog : Animal
{
    public override void Sound()
    {
        Console.WriteLine("Dog barks");
    }
}

public class Cat : Animal
{
    public override void Sound()
    {
        Console.WriteLine("Cat meows");
    }
}
---------------------------
Usage:

Animal myAnimal = new Animal();
myAnimal.Sound();  // Output: Animal makes a sound

Animal myDog = new Dog();
myDog.Sound();     // Output: Dog barks

Animal myCat = new Cat();
myCat.Sound();     // Output: Cat meows
‚û°Ô∏è Yahan Sound() method sab mein hai, par alag behavior ke saath.

‚û°Ô∏è Run time par decide hota hai ki kaunsa version chalega.
-------------------------------------------------------
üß† Polymorphism ka Faayda:

Point	Faayda
1Ô∏è‚É£	Code reuse hota hai.
2Ô∏è‚É£	Code easy maintainable hota hai.
3Ô∏è‚É£	New functionality add karna easy hota hai without breaking existing code.
4Ô∏è‚É£	Flexible aur scalable design milta hai.
-------------------------------------------
üöÄ Ek aur real-life Example:
Payment System ka socho:

Payment class bani hai.

CreditCardPayment, PayPalPayment, BankTransferPayment subclasses hain.

Har payment method apna alag logic use karega.
--------------------------------------------------------
Par jab use karoge:


Payment payment = new PayPalPayment();
payment.Pay();
‚û°Ô∏è Tumhe fark nahi padta andar kya chal raha hai.
‚û°Ô∏è Bus Pay() call karoge, correct wala apne aap chalega.
-------------------------------------------------
üìù Final Line:
Polymorphism = "Ek hi kaam, alag-alag tareeke se karna", 
jaise ek remote ka power button har device ke liye kaam karta hai but action alag hota hai.