using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace RaviwithCsharp.Day-4
{
    public class 1_Method Overloading
    {
        
    }
}
------------------------------------------
Method Overloading kya hota hai?
âœ… Jab ek hi class me multiple methods same naam se hote hain lekin unke parameters alag hote hain, to usko method overloading kehte hain.
âœ… Yeh compile-time polymorphism ka ek example hai.
âœ… Method overloading readability aur flexibility badhata hai, kyunki ek hi method ko different ways me call kiya ja sakta hai.
------------------------------------------------------------------
ðŸš€ 1. Simple Example of Method Overloading
âœ… Scenario: Ek Add method jo numbers ko add kare, lekin alag-alag types aur count ke liye overloaded versions bane.
using System;

class Calculator  
{  
    // âœ… Overload 1: Add two integers
    public int Add(int a, int b)  
    {  
        return a + b;  
    }  

    // âœ… Overload 2: Add three integers
    public int Add(int a, int b, int c)  
    {  
        return a + b + c;  
    }  

    // âœ… Overload 3: Add two double numbers
    public double Add(double a, double b)  
    {  
        return a + b;  
    }  
}

class Program  
{  
    static void Main()  
    {  
        Calculator calc = new Calculator();

        Console.WriteLine(calc.Add(5, 10));       // âœ… Calls first overload
        Console.WriteLine(calc.Add(5, 10, 15));   // âœ… Calls second overload
        Console.WriteLine(calc.Add(2.5, 3.7));    // âœ… Calls third overload
    }  
}
ðŸ“Œ Output:
15
30
6.2
ðŸ“Œ Ek hi Add naam ka method use kiya, lekin compiler automatically correct overload select kar raha hai.
-------------------------------------------------------
ðŸš€ 2. Method Overloading with Different Parameter Types
âœ… Scenario: Ek method jo kisi value ko print kare, lekin alag-alag types ke liye overloaded ho.

using System;

class Printer  
{  
    public void Print(int number)  
    {  
        Console.WriteLine("Integer: " + number);  
    }  

    public void Print(string text)  
    {  
        Console.WriteLine("String: " + text);  
    }  

    public void Print(double value)  
    {  
        Console.WriteLine("Double: " + value);  
    }  
}

class Program  
{  
    static void Main()  
    {  
        Printer printer = new Printer();

        printer.Print(100);      // âœ… Calls int overload
        printer.Print("Hello");  // âœ… Calls string overload
        printer.Print(10.5);     // âœ… Calls double overload
    }  
}
ðŸ“Œ Output:
Integer: 100
String: Hello
Double: 10.5
ðŸ“Œ Ek hi Print naam ka method use kiya, lekin different data types ke liye alag versions bana diye.
----------------------------------------------------
ðŸš€ 3. Method Overloading with Different Parameter Order
âœ… Scenario: Ek method jo kisi user ka data print kare, lekin parameters ke order alag ho sake.

using System;

class UserInfo  
{  
    public void Show(string name, int age)  
    {  
        Console.WriteLine($"Name: {name}, Age: {age}");  
    }  

    public void Show(int age, string name)  
    {  
        Console.WriteLine($"Age: {age}, Name: {name}");  
    }  
}

class Program  
{  
    static void Main()  
    {  
        UserInfo user = new UserInfo();

        user.Show("Amit", 25);  // âœ… Calls first overload
        user.Show(30, "Ravi");  // âœ… Calls second overload
    }  
}
ðŸ“Œ Output:
Name: Amit, Age: 25
Age: 30, Name: Ravi
ðŸ“Œ Alag-alag order me parameters hone se compiler different overloads ko identify kar leta hai.
--------------------------------------------------------
ðŸš€ 4. Method Overloading with Optional Parameters
âœ… Scenario: Ek method jo employee ka data print kare, lekin kuch optional parameters bhi allow kare.

using System;

class Employee  
{  
    public void Show(string name)  
    {  
        Console.WriteLine($"Employee Name: {name}");  
    }  

    public void Show(string name, string department = "General")  
    {  
        Console.WriteLine($"Employee Name: {name}, Department: {department}");  
    }  
}

class Program  
{  
    static void Main()  
    {  
        Employee emp = new Employee();

        emp.Show("Rahul");             // âœ… Calls first overload
        emp.Show("Priya", "HR");       // âœ… Calls second overload
    }  
}
ðŸ“Œ Output:
Employee Name: Rahul
Employee Name: Priya, Department: HR
ðŸ“Œ Method Overloading aur Default Parameters ko combine karke flexible method design kiya.
-------------------------------------------------------------------------
ðŸš€ 5. Method Overloading in Real-World Scenario
âœ… Scenario: E-commerce system me ek method jo product ka order place kare, lekin different input formats accept kare.

using System;

class Order  
{  
    // âœ… Overload 1: Order by Product Name
    public void PlaceOrder(string product)  
    {  
        Console.WriteLine($"Order placed for: {product}");  
    }  

    // âœ… Overload 2: Order by Product Name & Quantity
    public void PlaceOrder(string product, int quantity)  
    {  
        Console.WriteLine($"Order placed for: {product}, Quantity: {quantity}");  
    }  

    // âœ… Overload 3: Order by Product ID
    public void PlaceOrder(int productId)  
    {  
        Console.WriteLine($"Order placed for Product ID: {productId}");  
    }  
}

class Program  
{  
    static void Main()  
    {  
        Order order = new Order();

        order.PlaceOrder("Laptop");      // âœ… Calls first overload
        order.PlaceOrder("Mobile", 2);   // âœ… Calls second overload
        order.PlaceOrder(101);           // âœ… Calls third overload
    }  
}
ðŸ“Œ Output:
Order placed for: Laptop
Order placed for: Mobile, Quantity: 2
Order placed for Product ID: 101
ðŸ“Œ Ek hi PlaceOrder method ko multiple ways se call kar sakte hain.
----------------------------------------------
ðŸš€ Conclusion
ðŸ”¹ Method Overloading ek powerful feature hai jo readability aur code reuse improve karta hai.
ðŸ”¹ Isse hum ek hi naam wale multiple methods bana sakte hain jo different parameters accept karein.
ðŸ”¹ Yeh real-world applications jaise E-commerce, Calculator, Printing, User Input Handling me kaafi use hota hai.