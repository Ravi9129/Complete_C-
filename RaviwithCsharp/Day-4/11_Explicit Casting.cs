using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace RaviwithCsharp.Day-4
{
    public class 11_Explicit Casting
    {
        
    }
}
----------------------------------------------------
Explicit Casting Kya Hai?
âœ… Explicit Casting manually hoti hai jab ek larger data type ko smaller data type me convert karna ho.
âœ… Explicit casting se data loss ho sakti hai, isliye programmer ko khud batana padta hai ki conversion karni hai.
âœ… Syntax:

smallerType variable = (smallerType)largerTypeValue;
-------------------------------------------------------
ðŸš€ 1. Basic Example of Explicit Casting
âœ… Scenario: Ek double value ko int me convert karna.

using System;

class Program
{
    static void Main()
    {
        double num = 10.75; // âœ… Larger Type
        int result = (int)num; // âœ… Explicit Casting (double â†’ int)

        Console.WriteLine("Double: " + num);
        Console.WriteLine("Integer: " + result);
    }
}
ðŸ“Œ Output:
Double: 10.75
Integer: 10
ðŸ“Œ Yahan .75 ka data loss ho gaya kyunki int fractional part store nahi karta.
-------------------------------------------------------
ðŸš€ 2. Numeric Type Conversion with Explicit Casting
âœ… Scenario: Bigger type ko smaller type me convert karna (data loss ho sakti hai).

using System;

class Program
{
    static void Main()
    {
        long largeNumber = 100000; // âœ… Large Type
        int smallNumber = (int)largeNumber; // âœ… Explicit Casting (long â†’ int)

        Console.WriteLine($"Long: {largeNumber}, Int: {smallNumber}");
    }
}
ðŸ“Œ Output:
Long: 100000, Int: 100000
ðŸ“Œ Agar number int ki limit se bada hota, to data loss ya exception ho sakti thi.
-----------------------------------------------------------------
ðŸš€ 3. Explicit Casting with Overflow (Data Loss Issue)
âœ… Scenario: Agar ek bada number ek chhoti range wale type me cast karein to data loss ho sakti hai.

using System;

class Program
{
    static void Main()
    {
        long largeValue = 2147483648; // âœ… Out of int range (int.MaxValue = 2147483647)
        int smallValue = (int)largeValue; // âœ… Explicit Casting

        Console.WriteLine($"Large Value: {largeValue}");
        Console.WriteLine($"Small Value: {smallValue}");
    }
}
ðŸ“Œ Output:
Large Value: 2147483648
Small Value: -2147483648
ðŸ“Œ Yahan value wrap ho gayi (integer overflow) kyunki int ka maximum range exceed ho gaya.
------------------------------------------------------------
ðŸš€ 4. Explicit Casting Between Character and Integer
âœ… Scenario: char ko int me cast karna aur wapas char me convert karna.

using System;

class Program
{
    static void Main()
    {
        char letter = 'A'; // âœ… ASCII Value: 65
        int asciiValue = (int)letter; // âœ… Explicit Casting (char â†’ int)

        Console.WriteLine($"Character: {letter}, ASCII Value: {asciiValue}");

        char newLetter = (char)asciiValue; // âœ… Explicit Casting (int â†’ char)
        Console.WriteLine($"Converted Back: {newLetter}");
    }
}
ðŸ“Œ Output:
Character: A, ASCII Value: 65
Converted Back: A
ðŸ“Œ Yahan char â†’ int â†’ char conversion successfully hua bina kisi data loss ke.
-----------------------------------------------------------------
ðŸš€ 5. Explicit Casting in Real-World Scenario (Currency Conversion)
âœ… Scenario: Ek banking app me hum floating-point currency values ko integer me convert kar sakte hain.

using System;

class Program
{
    static void Main()
    {
        double totalAmount = 7500.99; // âœ… Total amount with decimal
        int payableAmount = (int)totalAmount; // âœ… Explicit Casting (double â†’ int)

        Console.WriteLine($"Total Amount: {totalAmount:C}");
        Console.WriteLine($"Payable Amount: {payableAmount:C}");
    }
}
ðŸ“Œ Output:
Total Amount: $7,500.99
Payable Amount: $7,500.00
ðŸ“Œ Decimal part loss ho gaya kyunki int fractional values store nahi karta.
--------------------------------------------------------
ðŸš€ 6. Explicit Casting with Classes (Downcasting in OOP)
âœ… Scenario: Base class ko derived class me cast karna.

using System;

class Animal // âœ… Base Class
{
    public string Name = "Generic Animal";
}

class Dog : Animal // âœ… Derived Class
{
    public string Breed = "Labrador";
}

class Program
{
    static void Main()
    {
        Animal animal = new Dog(); // âœ… Implicit Upcasting (Derived â†’ Base)
        Dog dog = (Dog)animal; // âœ… Explicit Downcasting (Base â†’ Derived)

        Console.WriteLine($"Animal Name: {dog.Name}");
        Console.WriteLine($"Dog Breed: {dog.Breed}");
    }
}
ðŸ“Œ Output:
Animal Name: Generic Animal
Dog Breed: Labrador
ðŸ“Œ Yahan Animal ko Dog me explicitly cast kiya taaki Breed property access kar sakein.

ðŸš€ Conclusion
âœ… Explicit Casting manually hoti hai jab ek larger type ko smaller type me convert karna ho.
âœ… Data loss ya integer overflow ho sakta hai, isliye carefully use karna chahiye.
âœ… OOP me upcasting aur downcasting ke liye bhi use hoti hai.
âœ… Large numeric types ko smaller types me convert karne ke liye zaroori hoti hai.